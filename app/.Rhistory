colnames(Schwarz) <- c("BuscoId","Status")
Doyle$Status[Doyle$Status=="Complete"] = "Singleton"
Lang$Status[Lang$Status=="Complete"] = "Singleton"
Schwarz$Status[Schwarz$Status=="Complete"] = "Singleton"
myProteins <- intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Doyle$Status == "Missing"])
length(myProteins)
intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Doyle$Status == "Missing"])
Doyle$BuscoId[Doyle$Status == "Singleton"]
Lang$BuscoId[Doyle$Status == "Missing"]
c("EOG091H000H","EOG091H0016","EOG091H001E","EOG091H0021","EOG091H0029","EOG091H003X","EOG091H004P","EOG091H005M","EOG091H006B","EOG091H007U","EOG091H008Z","EOG091H0090","EOG091H00C4","EOG091H00DB","EOG091H00ER","EOG091H00FN","EOG091H00JR","EOG091H00K2","EOG091H00KI","EOG091H00LE","EOG091H00MA","EOG091H00O1","EOG091H00O6","EOG091H00OW","EOG091H00PT","EOG091H00RF","EOG091H00T3","EOG091H00T7","EOG091H00TG","EOG091H00WM","EOG091H00YA","EOG091H00ZE","EOG091H011J","EOG091H0125","EOG091H012M","EOG091H013G","EOG091H013W","EOG091H014Q","EOG091H016J","EOG091H017K","EOG091H018I","EOG091H018Y","EOG091H0190","EOG091H019P","EOG091H01CW","EOG091H01GP","EOG091H01JV","EOG091H01LE","EOG091H01N6","EOG091H01O1","EOG091H01OW","EOG091H01PY","EOG091H01SM","EOG091H01UZ","EOG091H01ZI","EOG091H01ZL","EOG091H01ZP","EOG091H021O","EOG091H0234","EOG091H026T","EOG091H027V","EOG091H02AB","EOG091H02CS","EOG091H02DM","EOG091H02EN","EOG091H02F5","EOG091H02FN","EOG091H02GU","EOG091H02QU","EOG091H02V3","EOG091H02V7","EOG091H02XN","EOG091H02XU","EOG091H02ZX","EOG091H034Q","EOG091H0387","EOG091H039O","EOG091H03B0","EOG091H03B5","EOG091H03DJ","EOG091H03FE","EOG091H03IC","EOG091H03KF","EOG091H03Q1","EOG091H03QW","EOG091H03S3","EOG091H03T8","EOG091H03TK","EOG091H03TW","EOG091H03VV","EOG091H03WS","EOG091H040C","EOG091H0433","EOG091H044U","EOG091H049M","EOG091H04AQ","EOG091H04B8","EOG091H04FI","EOG091H04WQ","EOG091H04YN","EOG091H050V","EOG091H056M","EOG091H059E","EOG091H05BW","EOG091H05C4","EOG091H05FV","EOG091H05HQ","EOG091H05LD","EOG091H05LE","EOG091H05PM","EOG091H0641","EOG091H065R","EOG091H06EG","EOG091H06N7","EOG091H06NT","EOG091H06SS","EOG091H06TA","EOG091H06XQ","EOG091H074S","EOG091H079M","EOG091H07A3","EOG091H07B0","EOG091H07LN","EOG091H07XH","EOG091H0809","EOG091H080L","EOG091H08AH","EOG091H08AP","EOG091H08DE","EOG091H08DZ","EOG091H08GV","EOG091H08HY","EOG091H08JL","EOG091H08LW","EOG091H0944","EOG091H0949","EOG091H094E","EOG091H098G","EOG091H09AA","EOG091H09YV","EOG091H0BO8","EOG091H000H","EOG091H0016","EOG091H001E","EOG091H0021","EOG091H0029","EOG091H003X","EOG091H004P","EOG091H005M","EOG091H006B","EOG091H007U","EOG091H008Z","EOG091H0090","EOG091H00C4","EOG091H00DB","EOG091H00ER","EOG091H00FN","EOG091H00JR","EOG091H00K2","EOG091H00KI","EOG091H00LE","EOG091H00MA","EOG091H00O1","EOG091H00O6","EOG091H00OW","EOG091H00PT","EOG091H00RF","EOG091H00T3","EOG091H00T7","EOG091H00TG","EOG091H00WM","EOG091H00YA","EOG091H00ZE","EOG091H011J","EOG091H0125","EOG091H012M","EOG091H013G","EOG091H013W","EOG091H014Q","EOG091H016J","EOG091H017K","EOG091H018I","EOG091H018Y","EOG091H0190","EOG091H019P","EOG091H01CW","EOG091H01GP","EOG091H01JV","EOG091H01LE","EOG091H01N6","EOG091H01O1","EOG091H01OW","EOG091H01PY","EOG091H01SM","EOG091H01UZ","EOG091H01ZI","EOG091H01ZL","EOG091H01ZP","EOG091H021O","EOG091H0234","EOG091H026T","EOG091H027V","EOG091H02AB","EOG091H02CS","EOG091H02DM","EOG091H02EN","EOG091H02F5","EOG091H02FN","EOG091H02GU","EOG091H02QU","EOG091H02V3","EOG091H02V7","EOG091H02XN","EOG091H02XU","EOG091H02ZX","EOG091H034Q","EOG091H0387","EOG091H039O","EOG091H03B0","EOG091H03B5","EOG091H03DJ","EOG091H03FE","EOG091H03IC","EOG091H03KF","EOG091H03Q1","EOG091H03QW","EOG091H03S3","EOG091H03T8","EOG091H03TK","EOG091H03TW","EOG091H03VV","EOG091H03WS","EOG091H040C","EOG091H0433","EOG091H044U","EOG091H049M","EOG091H04AQ","EOG091H04B8","EOG091H04FI","EOG091H04WQ","EOG091H04YN","EOG091H050V","EOG091H056M","EOG091H059E","EOG091H05BW","EOG091H05C4","EOG091H05FV","EOG091H05HQ","EOG091H05LD","EOG091H05LE","EOG091H05PM","EOG091H0641","EOG091H065R","EOG091H06EG","EOG091H06N7","EOG091H06NT","EOG091H06SS","EOG091H06TA","EOG091H06XQ","EOG091H074S","EOG091H079M","EOG091H07A3","EOG091H07B0","EOG091H07LN","EOG091H07XH","EOG091H0809","EOG091H080L","EOG091H08AH","EOG091H08AP","EOG091H08DE","EOG091H08DZ","EOG091H08GV","EOG091H08HY","EOG091H08JL","EOG091H08LW","EOG091H0944","EOG091H0949","EOG091H094E","EOG091H098G","EOG091H09AA","EOG091H09YV","EOG091H0BO8")
length(c("EOG091H000H","EOG091H0016","EOG091H001E","EOG091H0021","EOG091H0029","EOG091H003X","EOG091H004P","EOG091H005M","EOG091H006B","EOG091H007U","EOG091H008Z","EOG091H0090","EOG091H00C4","EOG091H00DB","EOG091H00ER","EOG091H00FN","EOG091H00JR","EOG091H00K2","EOG091H00KI","EOG091H00LE","EOG091H00MA","EOG091H00O1","EOG091H00O6","EOG091H00OW","EOG091H00PT","EOG091H00RF","EOG091H00T3","EOG091H00T7","EOG091H00TG","EOG091H00WM","EOG091H00YA","EOG091H00ZE","EOG091H011J","EOG091H0125","EOG091H012M","EOG091H013G","EOG091H013W","EOG091H014Q","EOG091H016J","EOG091H017K","EOG091H018I","EOG091H018Y","EOG091H0190","EOG091H019P","EOG091H01CW","EOG091H01GP","EOG091H01JV","EOG091H01LE","EOG091H01N6","EOG091H01O1","EOG091H01OW","EOG091H01PY","EOG091H01SM","EOG091H01UZ","EOG091H01ZI","EOG091H01ZL","EOG091H01ZP","EOG091H021O","EOG091H0234","EOG091H026T","EOG091H027V","EOG091H02AB","EOG091H02CS","EOG091H02DM","EOG091H02EN","EOG091H02F5","EOG091H02FN","EOG091H02GU","EOG091H02QU","EOG091H02V3","EOG091H02V7","EOG091H02XN","EOG091H02XU","EOG091H02ZX","EOG091H034Q","EOG091H0387","EOG091H039O","EOG091H03B0","EOG091H03B5","EOG091H03DJ","EOG091H03FE","EOG091H03IC","EOG091H03KF","EOG091H03Q1","EOG091H03QW","EOG091H03S3","EOG091H03T8","EOG091H03TK","EOG091H03TW","EOG091H03VV","EOG091H03WS","EOG091H040C","EOG091H0433","EOG091H044U","EOG091H049M","EOG091H04AQ","EOG091H04B8","EOG091H04FI","EOG091H04WQ","EOG091H04YN","EOG091H050V","EOG091H056M","EOG091H059E","EOG091H05BW","EOG091H05C4","EOG091H05FV","EOG091H05HQ","EOG091H05LD","EOG091H05LE","EOG091H05PM","EOG091H0641","EOG091H065R","EOG091H06EG","EOG091H06N7","EOG091H06NT","EOG091H06SS","EOG091H06TA","EOG091H06XQ","EOG091H074S","EOG091H079M","EOG091H07A3","EOG091H07B0","EOG091H07LN","EOG091H07XH","EOG091H0809","EOG091H080L","EOG091H08AH","EOG091H08AP","EOG091H08DE","EOG091H08DZ","EOG091H08GV","EOG091H08HY","EOG091H08JL","EOG091H08LW","EOG091H0944","EOG091H0949","EOG091H094E","EOG091H098G","EOG091H09AA","EOG091H09YV","EOG091H0BO8","EOG091H000H","EOG091H0016","EOG091H001E","EOG091H0021","EOG091H0029","EOG091H003X","EOG091H004P","EOG091H005M","EOG091H006B","EOG091H007U","EOG091H008Z","EOG091H0090","EOG091H00C4","EOG091H00DB","EOG091H00ER","EOG091H00FN","EOG091H00JR","EOG091H00K2","EOG091H00KI","EOG091H00LE","EOG091H00MA","EOG091H00O1","EOG091H00O6","EOG091H00OW","EOG091H00PT","EOG091H00RF","EOG091H00T3","EOG091H00T7","EOG091H00TG","EOG091H00WM","EOG091H00YA","EOG091H00ZE","EOG091H011J","EOG091H0125","EOG091H012M","EOG091H013G","EOG091H013W","EOG091H014Q","EOG091H016J","EOG091H017K","EOG091H018I","EOG091H018Y","EOG091H0190","EOG091H019P","EOG091H01CW","EOG091H01GP","EOG091H01JV","EOG091H01LE","EOG091H01N6","EOG091H01O1","EOG091H01OW","EOG091H01PY","EOG091H01SM","EOG091H01UZ","EOG091H01ZI","EOG091H01ZL","EOG091H01ZP","EOG091H021O","EOG091H0234","EOG091H026T","EOG091H027V","EOG091H02AB","EOG091H02CS","EOG091H02DM","EOG091H02EN","EOG091H02F5","EOG091H02FN","EOG091H02GU","EOG091H02QU","EOG091H02V3","EOG091H02V7","EOG091H02XN","EOG091H02XU","EOG091H02ZX","EOG091H034Q","EOG091H0387","EOG091H039O","EOG091H03B0","EOG091H03B5","EOG091H03DJ","EOG091H03FE","EOG091H03IC","EOG091H03KF","EOG091H03Q1","EOG091H03QW","EOG091H03S3","EOG091H03T8","EOG091H03TK","EOG091H03TW","EOG091H03VV","EOG091H03WS","EOG091H040C","EOG091H0433","EOG091H044U","EOG091H049M","EOG091H04AQ","EOG091H04B8","EOG091H04FI","EOG091H04WQ","EOG091H04YN","EOG091H050V","EOG091H056M","EOG091H059E","EOG091H05BW","EOG091H05C4","EOG091H05FV","EOG091H05HQ","EOG091H05LD","EOG091H05LE","EOG091H05PM","EOG091H0641","EOG091H065R","EOG091H06EG","EOG091H06N7","EOG091H06NT","EOG091H06SS","EOG091H06TA","EOG091H06XQ","EOG091H074S","EOG091H079M","EOG091H07A3","EOG091H07B0","EOG091H07LN","EOG091H07XH","EOG091H0809","EOG091H080L","EOG091H08AH","EOG091H08AP","EOG091H08DE","EOG091H08DZ","EOG091H08GV","EOG091H08HY","EOG091H08JL","EOG091H08LW","EOG091H0944","EOG091H0949","EOG091H094E","EOG091H098G","EOG091H09AA","EOG091H09YV","EOG091H0BO8"))
intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Lang$Status == "Missing"])
Lang$BuscoId[Lang$Status == "Missing"]
length(Lang$BuscoId[Lang$Status == "Missing"])
runApp()
library(shiny)
library(data.table)
library(plyr)
library(dplyr)
library(seqinr)
library(ggbio)
library(GenomicRanges)
library(plotly)
library(shinyBS)
library(shinyjs)
LangDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("ERR126028.Allignment.txt","ERR126028_1.Allignment.txt","ERR126028_2.Allignment.txt","ERR126029.Allignment.txt","ERR126029_1.Allignment.txt","ERR126029_2.Allignment.txt")))
SchwarzDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("SRR935429.Allignment.txt","SRR935429_1.Allignment.txt","SRR935429_2.Allignment.txt")))
proteinFile <-  "../Similarity Analysis/BuscoProteinSet.fa"
Doyle <-  unique(read.delim(file = "../Similarity Analysis/DoyleGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Lang <- unique(read.delim(file = "../Similarity Analysis/LangGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Schwarz <- unique(read.delim(file = "../Similarity Analysis/SchwarzGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
colnames(Doyle) <- c("BuscoId","Status")
colnames(Lang) <- c("BuscoId","Status")
colnames(Schwarz) <- c("BuscoId","Status")
Doyle$Status[Doyle$Status=="Complete"] = "Singleton"
Lang$Status[Lang$Status=="Complete"] = "Singleton"
Schwarz$Status[Schwarz$Status=="Complete"] = "Singleton"
diamondFiles <- LangDiamondFiles
myProteins <- intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Lang$Status == "Missing"])
#myProteins <- Lang$BuscoId[Doyle$Status == "Missing"]
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
save(diamondGRanges,file = "LangDiamondGranges.Rdata")
diamondFiles <- LangDiamondFiles
myProteins <- intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Lang$Status == "Missing"])
readDiamondFiles <- function(diamondFiles,proteinFile,bestAllignment = TRUE){
allDiamondGranges = GRanges()
for (diamondFile in diamondFiles){
diamond <- fread(diamondFile,header = FALSE,stringsAsFactors = FALSE,data.table = FALSE)
colnames(diamond) <- c("Query","Reference","%id","length","mistmatches","gaps","q.start","q.end","s.start","s.end","Diamondevalue","DiamondScore")
if(bestAllignment){
diamond <-   data.frame(diamond %>%
group_by(Query) %>%
filter(DiamondScore == max(DiamondScore)))
}
diamondGRanges <- makeGRangesFromDataFrame(diamond,seqnames.field= "Reference",start.field = "s.start",end.field ="s.end")
mcols(diamondGRanges)$Score <- diamond$DiamondScore
mcols(diamondGRanges)$Query <- diamond$Query
allDiamondGranges <-  c(allDiamondGranges,diamondGRanges)
}
#Correcting sequence lengths
if(!is.null(proteinFile)){
protein <<-  read.fasta(proteinFile)
seqlengths(allDiamondGranges) <-  getLength(protein[       seqnames(seqinfo(allDiamondGranges))        ])
}
return(allDiamondGranges)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage > 10 & totalCoverage<=200)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
save(diamondGRanges,file = "LangDiamondGranges.Rdata")
runApp()
LangDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("ERR126028.Allignment.txt","ERR126028_1.Allignment.txt","ERR126028_2.Allignment.txt","ERR126029.Allignment.txt","ERR126029_1.Allignment.txt","ERR126029_2.Allignment.txt")))
SchwarzDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("SRR935429.Allignment.txt","SRR935429_1.Allignment.txt","SRR935429_2.Allignment.txt")))
proteinFile <-  "../Similarity Analysis/BuscoProteinSet.fa"
Doyle <-  unique(read.delim(file = "../Similarity Analysis/DoyleGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Lang <- unique(read.delim(file = "../Similarity Analysis/LangGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Schwarz <- unique(read.delim(file = "../Similarity Analysis/SchwarzGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
colnames(Doyle) <- c("BuscoId","Status")
colnames(Lang) <- c("BuscoId","Status")
colnames(Schwarz) <- c("BuscoId","Status")
Doyle$Status[Doyle$Status=="Complete"] = "Singleton"
Lang$Status[Lang$Status=="Complete"] = "Singleton"
Schwarz$Status[Schwarz$Status=="Complete"] = "Singleton"
diamondFiles <- LangDiamondFiles
myProteins <- intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Lang$Status == "Missing"])
#myProteins <- Lang$BuscoId[Doyle$Status == "Missing"]
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
save(diamondGRanges,file = "LangDiamondGranges.Rdata")
proteinFile <-  "../Similarity Analysis/BuscoCelegans.fasta"
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
LangDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("ERR126028.Allignment.txt","ERR126028_1.Allignment.txt","ERR126028_2.Allignment.txt","ERR126029.Allignment.txt","ERR126029_1.Allignment.txt","ERR126029_2.Allignment.txt")))
SchwarzDiamondFiles <- c(paste0("../Similarity Analysis/LangDiamondResults/",c("SRR935429.Allignment.txt","SRR935429_1.Allignment.txt","SRR935429_2.Allignment.txt")))
proteinFile <-  "../Similarity Analysis/BuscoCelegans.fasta"
Doyle <-  unique(read.delim(file = "../Similarity Analysis/DoyleGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Lang <- unique(read.delim(file = "../Similarity Analysis/LangGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
Schwarz <- unique(read.delim(file = "../Similarity Analysis/SchwarzGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
colnames(Doyle) <- c("BuscoId","Status")
colnames(Lang) <- c("BuscoId","Status")
colnames(Schwarz) <- c("BuscoId","Status")
Doyle$Status[Doyle$Status=="Complete"] = "Singleton"
Lang$Status[Lang$Status=="Complete"] = "Singleton"
Schwarz$Status[Schwarz$Status=="Complete"] = "Singleton"
diamondFiles <- LangDiamondFiles
myProteins <- intersect(Doyle$BuscoId[Doyle$Status == "Singleton"],Lang$BuscoId[Lang$Status == "Missing"])
#myProteins <- Lang$BuscoId[Doyle$Status == "Missing"]
readDiamondFiles <- function(diamondFiles,proteinFile,bestAllignment = TRUE){
allDiamondGranges = GRanges()
for (diamondFile in diamondFiles){
diamond <- fread(diamondFile,header = FALSE,stringsAsFactors = FALSE,data.table = FALSE)
colnames(diamond) <- c("Query","Reference","%id","length","mistmatches","gaps","q.start","q.end","s.start","s.end","Diamondevalue","DiamondScore")
if(bestAllignment){
diamond <-   data.frame(diamond %>%
group_by(Query) %>%
filter(DiamondScore == max(DiamondScore)))
}
diamondGRanges <- makeGRangesFromDataFrame(diamond,seqnames.field= "Reference",start.field = "s.start",end.field ="s.end")
mcols(diamondGRanges)$Score <- diamond$DiamondScore
mcols(diamondGRanges)$Query <- diamond$Query
allDiamondGranges <-  c(allDiamondGranges,diamondGRanges)
}
#Correcting sequence lengths
if(!is.null(proteinFile)){
protein <<-  read.fasta(proteinFile)
seqlengths(allDiamondGranges) <-  getLength(protein[       seqnames(seqinfo(allDiamondGranges))        ])
}
return(allDiamondGranges)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage > 10 & totalCoverage<=200)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
save(diamondGRanges,file = "LangDiamondGranges.Rdata")
runApp()
#install.packages("shinyBS")
#install.packages("shinyjS")
#install.packages("ggiraph")
library(shiny)
#install.packages("shinyBS")
#install.packages("shinyjS")
#install.packages("ggiraph")
install.packages("tidy-verse")
#install.packages("shinyBS")
#install.packages("shinyjS")
#install.packages("ggiraph")
install.packages("tidyverse")
#install.packages("shinyBS")
#install.packages("shinyjS")
#install.packages("ggiraph")
library(shiny)
install.packages("shiny")
library(data.table)
install.packages("data.table")
library(data.table)
library(plyr)
library(dplyr)
library(seqinr)
install.packages("seqinr")
library(seqinr)
source("https://bioconductor.org/biocLite.R")
biocLite("ggbio")
library(ggbio)
library(GenomicRanges)
library(plotly)
library(shinyBS)
install.packages("shinyBS")
install.packages("shinyjS")
install.packages("plotly")
install.packages("shinyBS")
install.packages("shinyjS")
install.packages("plotly")
install.packages("shinyjs")
library(plotly)
library(shinyBS)
library(shinyjs)
shiny::runApp()
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
source("https://bioconductor.org/biocLite.R")
biocLite("ggbio")
shiny::runApp()
# install.packages("tidyverse")
# install.packages("shiny")
# install.packages("data.table")
# install.packages("seqinr")
# source("https://bioconductor.org/biocLite.R")
# biocLite("ggbio")
# install.packages("shinyBS")
# install.packages("shinyjs")
# install.packages("plotly")
#install.packages("ggiraph")
library(shiny)
library(data.table)
library(plyr)
library(dplyr)
library(seqinr)
library(ggbio)
# install.packages("tidyverse")
install.packages("shiny")
install.packages("shiny")
# install.packages("data.table")
# install.packages("seqinr")
# source("https://bioconductor.org/biocLite.R")
# biocLite("ggbio")
# install.packages("shinyBS")
# install.packages("shinyjs")
# install.packages("plotly")
#install.packages("ggiraph")
library(shiny)
# install.packages("data.table")
# install.packages("seqinr")
# source("https://bioconductor.org/biocLite.R")
# biocLite("ggbio")
# install.packages("shinyBS")
# install.packages("shinyjs")
# install.packages("plotly")
#install.packages("ggiraph")
library(shiny)
install.packages("yaml")
runApp()
runApp()
?write.table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
LangeCelegans <- read.table("shift/LangCeleganspercentAAGreaterThan.tsv")
LangBusco <- read.table("shift/LangBUSCOpercentAAGreaterThan.tsv")
SchwarzeCelegans <- read.table("shift/SchwarzCeleganspercentAAGreaterThan.tsv")
SchwarzBusco <- read.table("shift/SchwarzBUSCOpercentAAGreaterThan.tsv")
View(LangeCelegans)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram()
View(LangBusco)
LangeCelegans <- read.table("shift/LangCeleganspercentAAGreaterThan.tsv",header = TRUE)
SchwarzeCelegans <- read.table("shift/SchwarzCeleganspercentAAGreaterThan.tsv",header = TRUE)
LangeCelegans <- read.table("shift/LangCeleganspercentAAGreaterThan.tsv",header = TRUE)
LangBusco <- read.table("shift/LangBUSCOpercentAAGreaterThan.tsv",header = TRUE)
SchwarzeCelegans <- read.table("shift/SchwarzCeleganspercentAAGreaterThan.tsv",header = TRUE)
SchwarzBusco <- read.table("shift/SchwarzBUSCOpercentAAGreaterThan.tsv",header = TRUE)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram()
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram()
ggplot(LangBusco,aes(Percentcov))+geom_histogram()
ggplot(SchwarzeCelegans,aes(Percentcov))+geom_histogram()
ggplot(SchwarzBusco,aes(Percentcov))+geom_histogram()
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)+xlab
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 0.1)+xlab
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 0.1)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,120)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,120)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,70)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,70)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,200)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,200)
View(LangeCelegans)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,200)+xlim(0,100)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,200)+xlim(0,100)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,200)+xlim(0,100)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,200)+xlim(0,100)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,150)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 10)+ylim(0,150)
average(LangeCelegans$Percentcov)
LangeCelegans <- read.table("shift/LangCeleganspercentAAGreaterThan.tsv",header = TRUE)
LangBusco <- read.table("shift/LangBUSCOpercentAAGreaterThan.tsv",header = TRUE)
SchwarzeCelegans <- read.table("shift/SchwarzCeleganspercentAAGreaterThan.tsv",header = TRUE)
SchwarzBusco <- read.table("shift/SchwarzBUSCOpercentAAGreaterThan.tsv",header = TRUE)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)
mean(LangeCelegans$Percentcov)
average(LangBusco$Percentcov)
mean(LangeCelegans$Percentcov)
mean(LangBusco$Percentcov)
mean(LangeCelegans$Percentcov)
mean(LangeCelegans$Percentcov)
mean(LangBusco$Percentcov)
mean(LangeCelegans$Percentcov)
mean(LangBusco$Percentcov)
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()
ggplot(LangBusco,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)
ggplot(LangBusco,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)
ggplot(LangBusco,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)
ggplot(SchwarzeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,70)
ggplot(SchwarzBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,70)
ggplot(SchwarzeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,80)
ggplot(SchwarzBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,80)
ggplot(SchwarzBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,80)+title("Schwarz ALlinged to Busco Proteins")
ggplot(SchwarzBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,80)+ggtitle("Schwarz ALlinged to Busco Proteins")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
seqnames(seqinfo(allDiamondGranges))
protein <<-  read.fasta(proteinFile)
proteinFileCelegans <-  "../Similarity Analysis/BuscoCelegans.fasta"
protein <<-  read.fasta(proteinFile)
<
#myProteins <- Lang$BuscoId[Lang$Status == "Singleton"]
proteinFile <- proteinFileCelegans
protein <<-  read.fasta(proteinFile)
View(protein)
View(protein)
name(protein)
get_name(protein)
protein[[1]]
name(protein[[1]])
protein[name]
?read.fasta
names(protein)
length(names(protein))
View(name(read.fasta(proteinFile)))
View(names(read.fasta(proteinFile)))
load("LangBuscoGranges.Rdata")
#diamondGRanges <- readDiamondFiles(diamondFiles = diamondFiles,proteinFile = proteinFile)
#save(diamondGRanges,file = "Granges.Rdata")
splitDiamondGRanges <- split(diamondGRanges,seqnames(diamondGRanges))
coverage <- as.data.frame(coverage(diamondGRanges))
#Calculating Total Coverage
totalCoverage <- calculateTotalCoverage(coverage)
#Make coverage equal to the mode
updateSliderInput(session,"Coverage",value =getmode(totalCoverage[,1]) )
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= 59)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
left_join(names(read.fasta(proteinFile)),pertcentAAGreaterThanThreshold)
names(read.fasta(proteinFile))
left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
View(pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
View(pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
runApp()
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage > 10 & totalCoverage<=200)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
library(ggplot2)
PercentAAGreaterThan <- function(diamondGRanges,proteinFile){
splitDiamondGRanges <- split(diamondGRanges,seqnames(diamondGRanges))
coverage <- as.data.frame(coverage(diamondGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
threholdCoverage <- getmode(totalCoverage[,1])
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= input$Coverage)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
updateSelectInput(session,"Proteins",choices = pertcentAAGreaterThanThreshold$group_name)
return(pertcentAAGreaterThanThreshold)
}
load("../app/LangCelegansBuscoGranges.Rdata")
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
PercentAAGreaterThan <- function(diamondGRanges,proteinFile){
coverage <- as.data.frame(coverage(diamondGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
threholdCoverage <- getmode(totalCoverage[,1])
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= threholdCoverage)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
updateSelectInput(session,"Proteins",choices = pertcentAAGreaterThanThreshold$group_name)
return(pertcentAAGreaterThanThreshold)
}
load("../app/LangCelegansBuscoGranges.Rdata")
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
PercentAAGreaterThan <- function(diamondGRanges,proteinFile){
coverage <- as.data.frame(coverage(diamondGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
threholdCoverage <- getmode(totalCoverage[,1])
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= threholdCoverage)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
return(pertcentAAGreaterThanThreshold)
}
load("../app/LangCelegansBuscoGranges.Rdata")
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/LangBuscoGranges.Rdata")
load("../app/LangBuscoGranges.Rdata")
LangBusco <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoProteinSet.fa")
load("../app/SchwarzCelegansBuscoGranges.Rdata")
load("../app/SchwarzCelegansBuscoGranges.Rdata")
SchwarzeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/SchwarzBuscoGranges.Rdata")
load("../app/SchwarzBuscoGranges.Rdata")
SchwarzBusco <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoProteinSet.fa")
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
mean(LangeCelegans$Percentcov)
mean(LangBusco$Percentcov)
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
library(GenomicRanges)
library(dplyr)
library(ggplot2)
PercentAAGreaterThan <- function(diamondGRanges,proteinFile){
coverage <- as.data.frame(coverage(diamondGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
threholdCoverage <- getmode(totalCoverage[,1])
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= threholdCoverage)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
return(pertcentAAGreaterThanThreshold)
}
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/SchwarzCelegansBuscoGranges.Rdata")
load("../app/LangCelegansBuscoGranges.Rdata")
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/LangBuscoGranges.Rdata")
LangBusco <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoProteinSet.fa")
load("../app/SchwarzCelegansBuscoGranges.Rdata")
library(GenomicRanges)
library(data.table)
library(plyr)
library(dplyr)
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage > 10 & totalCoverage<=200)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
library(ggplot2)
PercentAAGreaterThan <- function(diamondGRanges,proteinFile){
coverage <- as.data.frame(coverage(diamondGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
threholdCoverage <- getmode(totalCoverage[,1])
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= threholdCoverage)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(diamondGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(data.frame(group_name = names(read.fasta(proteinFile))),pertcentAAGreaterThanThreshold)
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
return(pertcentAAGreaterThanThreshold)
}
load("../app/LangCelegansBuscoGranges.Rdata")
LangeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/LangBuscoGranges.Rdata")
LangBusco <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoProteinSet.fa")
load("../app/SchwarzCelegansBuscoGranges.Rdata")
SchwarzeCelegans <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoCelegans.fasta")
load("../app/SchwarzBuscoGranges.Rdata")
SchwarzBusco <- PercentAAGreaterThan(diamondGRanges,"../Similarity Analysis/BuscoProteinSet.fa")
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,75)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
View(LangeCelegans)
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,110)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
ggplot(LangeCelegans,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,110)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
ggplot(LangBusco,aes(Percentcov))+geom_histogram(binwidth = 5)+ylim(0,110)+ggtitle("Laing Allinged to Busco Proteins")
mean(LangeCelegans$Percentcov)
mean(LangBusco$Percentcov)
ggplot(LangeCelegans,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)+ggtitle("Laing Allinged to C.elegans Busco Proteins")
ggplot(LangBusco,aes(x=1,y=Percentcov))+geom_violin(alpha=0.2)+coord_flip()+geom_jitter(shape=16,size=0.4)+ggtitle("Laing Allinged to Busco Proteins")
runApp()
runApp()
