plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(group = Status, alpha=0,col="blue",aes(x=1,y=Percentcov))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(group=Status,alpha=0)
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(group=Status,alpha=0)
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(group=pertcentAAGreaterThanThreshold$Status,alpha=0)
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(alpha=0)
plot
?geom_violin
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov,group=Status)) + geom_violin(alpha=0)
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov) + geom_violin(alpha=0,aes(group=group))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov) + geom_violin(alpha=0,aes(group=Status))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(alpha=0,aes(group=Status))
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale = "width")+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,scale = "width"))
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale = "count")+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale = "count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale = "count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale = "width")+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale = "count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale="count")+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale="count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale="count")+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale="count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov),scale="count") + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale="count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width =1)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov),scale="count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width =1)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=2),scale="count")
plot
table(pertcentAAGreaterThanThreshold$Status=="Singleton")
table(pertcentAAGreaterThanThreshold$Status=="Singleton")[TRUE]
table(pertcentAAGreaterThanThreshold$Status=="Singleton")[2]
SingletonCount = table(pertcentAAGreaterThanThreshold$Status=="Singleton")[2]
SingletonCount = table(pertcentAAGreaterThanThreshold$Status=="Singleton")[2]
DuplicatedCount = table(pertcentAAGreaterThanThreshold$Status=="Duplicated")[2]
FragmentedCount = table(pertcentAAGreaterThanThreshold$Status=="Fragmented")[2]
MissingCount = table(pertcentAAGreaterThanThreshold$Status=="Missing")[2]
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width=1)) + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=DuplicatedCount/SingletonCount),scale="count")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width=1))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=DuplicatedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=FragmentedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Missing"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=MissingCount/SingletonCount))
plot <- plot +coord_flip()
plot <- plot +geom_jitter(data =pertcentAAGreaterThanThreshold,shape=16,size=0.4,aes(color=Status))+ scale_colour_manual(values = c("Singleton"="green","Fragmented"="blue","Duplicated"="orange","Missing"="Red"))
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width=1))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=DuplicatedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="orange",aes(x=1,y=Percentcov,width=FragmentedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Missing"),alpha=0,col="red",aes(x=1,y=Percentcov,width=MissingCount/SingletonCount))
plot <- plot +coord_flip()
plot <- plot +geom_jitter(data =pertcentAAGreaterThanThreshold,shape=16,size=0.4,aes(color=Status))+ scale_colour_manual(values = c("Singleton"="green","Fragmented"="blue","Duplicated"="orange","Missing"="Red"))
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
ggsave("Lang.png",plot,height = 10,width =20)
library(data.table)
library(plyr)
library(dplyr)
library(seqinr)
library(GenomicRanges)
library(ggplot2)
files = c(paste0("LangDiamondResults/",c("ERR126028.Allignment.txt","ERR126028_1.Allignment.txt","ERR126028_2.Allignment.txt","ERR126029.Allignment.txt","ERR126029_1.Allignment.txt","ERR126029_2.Allignment.txt")))
readDiamond <- function(diamondFile,proteinFile,bestAllignment = TRUE){
diamond <- fread(diamondFile,header = FALSE,stringsAsFactors = FALSE,data.table = FALSE)
colnames(diamond) =c("Query","Reference","%id","length","mistmatches","gaps","q.start","q.end","s.start","s.end","Diamondevalue","DiamondScore")
if(bestAllignment){
diamond <-   data.frame(diamond %>%
group_by(Query) %>%
filter(DiamondScore == max(DiamondScore)))
}
diamondGRanges <- makeGRangesFromDataFrame(diamond,seqnames.field= "Reference",start.field = "s.start",end.field ="s.end")
mcols(diamondGRanges)$Score <- diamond$DiamondScore
mcols(diamondGRanges)$Query <- diamond$Query
#Correcting sequence lengths
if(!is.null(proteinFile)){
protein <<-  read.fasta(proteinFile)
seqlengths(diamondGRanges) <-  getLength(protein[       seqnames(seqinfo(diamondGRanges))        ])
}
return(diamondGRanges)
}
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage > 1 & totalCoverage< 500)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
proteinFile = "BuscoProteinSet.fa"
langGRanges = GRanges()
for (i in files){
grange = readDiamond(i,proteinFile,bestAllignment = TRUE)
langGRanges = c(langGRanges,grange)
}
rm(i,grange)
coverage <- as.data.frame(coverage(langGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
mode = getmode(totalCoverage[,1])
ggplot(totalCoverage)+geom_histogram(binwidth = 1,aes(x=totalCoverage,fill= totalCoverage == mode),show.legend = FALSE) + scale_fill_manual(values = c("FALSE"="black","TRUE"="blue"))+ylab("Number of amino acids")+xlab("Depth of Coverage")
#Violin Plot
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= mode)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(langGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(Lang,pertcentAAGreaterThanThreshold,by=c("BuscoId"= "group_name"))
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
set.seed(1)
SingletonCount = table(pertcentAAGreaterThanThreshold$Status=="Singleton")[2]
DuplicatedCount = table(pertcentAAGreaterThanThreshold$Status=="Duplicated")[2]
FragmentedCount = table(pertcentAAGreaterThanThreshold$Status=="Fragmented")[2]
MissingCount = table(pertcentAAGreaterThanThreshold$Status=="Missing")[2]
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width=1))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov,width=DuplicatedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="orange",aes(x=1,y=Percentcov,width=FragmentedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Missing"),alpha=0,col="red",aes(x=1,y=Percentcov,width=MissingCount/SingletonCount))
plot <- plot +coord_flip()
plot <- plot +geom_jitter(data =pertcentAAGreaterThanThreshold,shape=16,size=0.4,aes(color=Status))+ scale_colour_manual(values = c("Singleton"="green","Fragmented"="blue","Duplicated"="orange","Missing"="Red"))
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
ggsave("Lang.png",plot,height = 10,width =20)
#
# set.seed(1)
# plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))
# plot <- plot +coord_flip()
# plot <- plot +geom_jitter(shape=16,size=0.4,aes(color=group_name%in%Lang$BuscoId[Lang$Status == "Complete"]))+ scale_colour_manual(values = c("FALSE"="black","TRUE"="green"))
# plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  theme(legend.position = 'none')+ xlab("")
# plot
# ggsave("LangSingleton.png",plot)
#
#
# set.seed(1)
# plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))
# plot <- plot +coord_flip()
# plot <- plot +geom_jitter(shape=16,size=0.4,aes(color=group_name%in%Lang$BuscoId[Lang$Status == "Duplicated"]))+ scale_colour_manual(values = c("FALSE"="black","TRUE"="blue"))
# plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  theme(legend.position = 'none')+ xlab("")
# plot
# ggsave("LangDuplicated.png",plot)
#
# set.seed(1)
# plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))
# plot <- plot +coord_flip()
# plot <- plot +geom_jitter(shape=16,size=0.4,aes(color=group_name%in%Lang$BuscoId[Lang$Status == "Fragmented"]))+ scale_colour_manual(values = c("FALSE"="black","TRUE"="orange"))
# plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  theme(legend.position = 'none')+ xlab("")
# plot
# ggsave("LangFragmented.png",plot)
#
# set.seed(1)
# plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))
# plot <- plot +coord_flip()
# plot <- plot +geom_jitter(shape=16,size=0.4,aes(color=group_name%in% Lang$BuscoId[Lang$Status == "Missing"]))+ scale_colour_manual(values = c("FALSE"="black","TRUE"="red"))
# plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  theme(legend.position = 'none') + xlab("")
# plot
# ggsave("LangMissing.png",plot)
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="orange",aes(x=1,y=Percentcov))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Missing"),alpha=0,col="red",aes(x=1,y=Percentcov))
plot <- plot +coord_flip()
plot <- plot +geom_jitter(data =pertcentAAGreaterThanThreshold,shape=16,size=0.4,aes(color=Status))+ scale_colour_manual(values = c("Singleton"="green","Fragmented"="blue","Duplicated"="orange","Missing"="Red"))
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
ggsave("LangNotScaled.png",plot,height = 10,width =20)
files = c(paste0("SchwarzDiamondResults/",c("SRR935429.Allignment.txt","SRR935429_1.Allignment.txt","SRR935429_2.Allignment.txt")))
proteinFile = "BuscoProteinSet.fa"
SchwarzGRanges = GRanges()
for (i in files){
grange = readDiamond(i,proteinFile,bestAllignment = TRUE)
SchwarzGRanges = c(SchwarzGRanges,grange)
}
files = c(paste0("SchwarzDiamondResults/",c("SRR935429.Allignment.txt","SRR935429_1.Allignment.txt","SRR935429_2.Allignment.txt")))
proteinFile = "BuscoProteinSet.fa"
SchwarzGRanges = GRanges()
for (i in files){
grange = readDiamond(i,proteinFile,bestAllignment = TRUE)
SchwarzGRanges = c(SchwarzGRanges,grange)
}
for (i in files){
grange = readDiamond(i,proteinFile,bestAllignment = TRUE)
SchwarzGRanges = c(SchwarzGRanges,grange)
}
rm(i,grange)
coverage <- as.data.frame(coverage(SchwarzGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
mode = getmode(totalCoverage[,1])
ggplot(totalCoverage)+geom_histogram(binwidth = 1,aes(x=totalCoverage,fill= totalCoverage == mode),show.legend = FALSE) + scale_fill_manual(values = c("FALSE"="black","TRUE"="blue"))+ylab("Number of amino acids")+xlab("Depth of Coverage")
mode
calculateTotalCoverage <- function(coverage){
totalCoverage <- coverage[,3]
totalCoverage <- totalCoverage[(totalCoverage >31 & totalCoverage< 500)]   #Limited the data so it is easier to see the main parts of it. We can also limit the data later on as well.
totalCoverage <- as.data.frame(totalCoverage)
return(totalCoverage)
}
coverage <- as.data.frame(coverage(SchwarzGRanges))
coverage <- as.data.frame(coverage(SchwarzGRanges))
totalCoverage <- calculateTotalCoverage(coverage)
totalCoverage <- calculateTotalCoverage(coverage)
mode = getmode(totalCoverage[,1])
ggplot(totalCoverage)+geom_histogram(binwidth = 1,aes(x=totalCoverage,fill= totalCoverage == mode),show.legend = FALSE) + scale_fill_manual(values = c("FALSE"="black","TRUE"="blue"))+ylab("Number of amino acids")+xlab("Depth of Coverage")
ggplot(totalCoverage)+geom_histogram(binwidth = 1,aes(x=totalCoverage,fill= totalCoverage == mode),show.legend = FALSE) + scale_fill_manual(values = c("FALSE"="black","TRUE"="blue"))+ylab("Number of amino acids")+xlab("Depth of Coverage")
mode
pertcentAAGreaterThanThreshold <-   coverage[,c(2,3)] %>%
group_by(group_name) %>%
filter(value >= mode)%>%
tally()
pertcentAAGreaterThanThreshold$Length <- as.vector(seqlengths(SchwarzGRanges)[pertcentAAGreaterThanThreshold$group_name])
pertcentAAGreaterThanThreshold <- data.frame(mutate(pertcentAAGreaterThanThreshold,Percentcov=n/Length*100))
pertcentAAGreaterThanThreshold <- left_join(Schwarz,pertcentAAGreaterThanThreshold,by=c("BuscoId"= "group_name"))
pertcentAAGreaterThanThreshold$Percentcov[is.na(pertcentAAGreaterThanThreshold$Percentcov)] = 0
set.seed(1)
SingletonCount = table(pertcentAAGreaterThanThreshold$Status=="Singleton")[2]
DuplicatedCount = table(pertcentAAGreaterThanThreshold$Status=="Duplicated")[2]
FragmentedCount = table(pertcentAAGreaterThanThreshold$Status=="Fragmented")[2]
MissingCount = table(pertcentAAGreaterThanThreshold$Status=="Missing")[2]
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width= 1))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov,width= DuplicatedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="orange",aes(x=1,y=Percentcov,width= FragmentedCount/SingletonCount))
plot <- plot +coord_flip()
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
ggsave("Schwarz.png",plot,height = 10,width =20)
plot <- ggplot(pertcentAAGreaterThanThreshold,aes(x=1,y=Percentcov))+ geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Singleton"),alpha=0,col="green",aes(x=1,y=Percentcov,width= 1))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Duplicated"),alpha=0,col="blue",aes(x=1,y=Percentcov,width= DuplicatedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Fragmented"),alpha=0,col="orange",aes(x=1,y=Percentcov,width= FragmentedCount/SingletonCount))
plot <- plot + geom_violin(data= subset(pertcentAAGreaterThanThreshold,Status == "Missing"),alpha=0,col="red",aes(x=1,y=Percentcov,width= MissingCount/SingletonCount))
plot <- plot +coord_flip()
plot <- plot +geom_jitter(data =pertcentAAGreaterThanThreshold,shape=16,size=0.4,aes(color=Status))+ scale_colour_manual(values = c("Singleton"="green","Fragmented"="blue","Duplicated"="orange","Missing"="Red"))
plot <- plot +ylab(paste0("% amino acid that have coverage above ",mode))  +  xlab("")
plot
ggsave("Schwarz.png",plot,height = 10,width =20)
positve = read.delim("positiveHPVList.txt")
getwd()
cd Github
setwd(C:\Users\kourosh\Documents\GitHub\CancerResearchPinakiNathan\HNSC\gdac.broadinstitute.org_HNSC.Mutation_Packager_Calls.Level_3.2016012800.0.0)
shiny::runApp('GitHub/Sparkle/app')
runApp('GitHub/Sparkle/app')
runApp('GitHub/Sparkle/app')
runApp('GitHub/Sparkle/app')
runApp('GitHub/Sparkle/app')
Doyle <-  unique(read.delim(file = "../Similarity Analysis/DoyleGenome.tsv",comment.char = "#",header = FALSE,stringsAsFactors = FALSE)[,c(1,2)])
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE)
orthoDbToOrganism <- read.table("ogs.id.info")
orthoDbToOrganism <- read.table("ogs.id.info")
View(orthoDbToOrganism)
?grepl
grep("6239",orthoDbToOrganism)
grep("6239",orthoDbToOrganism$V1)
length(grep("6239",orthoDbToOrganism$V1))
length(grep("6239:*",orthoDbToOrganism$V1))
orthoDbToOrganism[grep("6239:*",orthoDbToOrganism$V1),]
celegans <- orthoDbToOrganism[grep("6239:*",orthoDbToOrganism$V1),]
length(celegans$V1)
length(unique(celegans$V2))
library(seqinr)
OrganismToSequence <-  read.fasta("6239.fs")
View(orthoDbToOrganism)
OrganismToSequence
View(celegans)
OrganismToSequence[celegans$V1]
length(OrganismToSequence[celegans$V1])
names(sequence)
names(sequence)
knitr::opts_chunk$set(echo = TRUE)
sequence <- OrganismToSequence[celegans$V1]
sequence
names(sequence)
names(sequence) <- celegans$V2
names(sequence)
write.fasta("BuscoCelegans.fasta")
write.fasta(sequence,"BuscoCelegans.fasta")
write.fasta(sequence,"BuscoCelegans.fasta")
?write.fasta
library(seqinr)
write.fasta
>write.fasta
?>write.fasta
?write.fasta
write.fasta(sequence,"BuscoCelegans.fasta")
write.fasta(sequence,file.out = "BuscoCelegans.fasta")
str(sequence)
write.fasta(sequence,names(sequence)file.out = "BuscoCelegans.fasta")
write.fasta(sequence,names(sequence),file.out = "BuscoCelegans.fasta")
str(sequence)
orthoDbToOrganism <- read.table("ogs.id.info")
celegans <- orthoDbToOrganism[grep("6239:*",orthoDbToOrganism$V1),]
length(unique(celegans$V2))
OrganismToSequence <-  read.fasta("6239.fs")
OrganismToSequence <-  read.fasta("6239.fs")
sequence <- OrganismToSequence[celegans$V1]
names(sequence) <- celegans$V2
write.fasta(sequence,names(sequence),file.out = "BuscoCelegans.fasta")
?read.fasta
OrganismToSequence <-  read.fasta("6239.fs",seqtype = "AA")
sequence <- OrganismToSequence[celegans$V1]
names(sequence) <- celegans$V2
write.fasta(sequence,names(sequence),file.out = "BuscoCelegans.fasta")
?write.fasta
sequence <- OrganismToSequence[celegans$V1]
names(sequence)
names(sequence) == celegans$V1
celegans$V1
celegans$V1[1]
orthoDbToOrganism <- read.table("ogs.id.info",stringsAsFactors = FALSE)
celegans <- orthoDbToOrganism[grep("6239:*",orthoDbToOrganism$V1),]
length(unique(celegans$V2))
OrganismToSequence <-  read.fasta("6239.fs",seqtype = "AA")
OrganismToSequence <-  read.fasta("6239.fs",seqtype = "AA")
sequence <- OrganismToSequence[celegans$V1]
names(sequence) == celegans$V1
celegans$V1
names(sequence)
names(sequence)
names(sequence) <- celegans$V2
names(sequence)
library(seqinr)
orthoDbToOrganism <- read.table("ogs.id.info",stringsAsFactors = FALSE)
celegans <- orthoDbToOrganism[grep("6239:*",orthoDbToOrganism$V1),]
length(unique(celegans$V2))
#As the length mathces the number of protiens it is safe to assume that the protiens are all there. So now to extra the genes.
OrganismToSequence <-  read.fasta("6239.fs",seqtype = "AA")
sequence <- OrganismToSequence[celegans$V1]
names(sequence) <- celegans$V2
write.fasta(sequence,names(sequence),file.out = "BuscoCelegans.fasta")
getwd()
write.table(result,"CancerGenomicMutSigCV.txt",sep="\t",row.names = FALSE)
library(data.table)
library(plyr)
library(dplyr)
library(knitr)
library(DT)
result = data.frame(Gene=read.delim("PPi_ER_Stress.txt",stringsAsFactors = FALSE))
cancers = grep("Mutation_Packager_Calls",list.dirs(),value = TRUE)
for (cancer in cancers){
Patients = list.files(cancer,pattern = "*.maf.txt",full.names = TRUE)
file  = rbindlist(lapply(Patients,read.delim))
file = data.frame(file)
filteredfile = file[file$Hugo_Symbol%in%result$Gene,]
determineFrquency <- function(gene){
length(unique(filteredfile[filteredfile$Hugo_Symbol == gene,"Tumor_Sample_Barcode"]))/length(Patients)
}
result = cbind(result,sapply(result$Gene,determineFrquency))
colnames(result)[length(colnames(result))] = strsplit(cancer,"/")[[1]][2]
}
library(data.table)
library(plyr)
library(dplyr)
library(knitr)
library(DT)
result = data.frame(Gene=read.delim("PPi_ER_Stress.txt",stringsAsFactors = FALSE))
cancers = grep("Mutation_Packager_Calls",list.dirs(),value = TRUE)
for (cancer in cancers){
Patients = list.files(cancer,pattern = "*.maf.txt",full.names = TRUE)
file  = rbindlist(lapply(Patients,read.delim))
file = data.frame(file)
filteredfile = file[file$Hugo_Symbol%in%result$Gene,]
determineFrquency <- function(gene){
length(unique(filteredfile[filteredfile$Hugo_Symbol == gene,"Tumor_Sample_Barcode"]))/length(Patients)
}
result = cbind(result,sapply(result$Gene,determineFrquency))
colnames(result)[length(colnames(result))] = strsplit(cancer,"/")[[1]][2]
}
rm(cancer,determineFrquency,filteredfile,file,Patients)
#Found in # of cancers using MutCigCV
MutSigCVFiles = list.files(pattern = "*sig_genes.txt",full.names = TRUE,recursive = TRUE)
MutSigCV  <-  data.frame(rbindlist(lapply(MutSigCVFiles,read.delim, stringsAsFactors = FALSE)))
MutSigCV <- MutSigCV[MutSigCV$p<0.05,]
result$"Signifcant" <- NA
for(gene in result$Gene){
count = table(MutSigCV$gene)[gene]
if(is.na(count)){
result[gene,"Signifcant"] <- 0
}
else{
result[gene,"Signifcant"] <-  count
}
}
rm(MutSigCVFiles,gene,count)
#Found in # of cancers
result$"FoundIn#Cancers" <- NA
result$Cancers <- NA
for(gene in result$Gene){
count = 0
inCancer = c()
for (cancer in colnames(result)[c(-1,-18,-19,-20)]){
if(result[gene,cancer] !=0){
count = count + 1
inCancer = c(inCancer,cancer)
}
}
result[gene,"FoundIn#Cancers"] = count
result[gene,"Cancers"] =paste(inCancer, collapse=" ")
}
rm(inCancer,gene,count)
write.table(result,"CancerGenomicMutSigCV.txt",sep="\t",row.names = FALSE)
rm(inCancer,gene,count,cancer)
knitr::opts_chunk$set(
warning = F,
message = F,
dev = "png",
dpi = 100)
library(dplyr)
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
![](untidy.png)
untidy.png
knitr::opts_chunk$set(
warning = F,
message = F,
dev = "png",
dpi = 100)
data
data <- data_frame(
ID = c(1, 2, 3),
Group1 = c("x", "y", "z"),
Group2 = c("a", "b", "c"))
data <- data_frame(
ID = c(1, 2, 3),
Group1 = c("x", "y", "z"),
Group2 = c("a", "b", "c"))
data <- data_frame(
ID = c(1, 2, 3),
Group1 = c("x", "y", "z"),
Group2 = c("a", "b", "c"))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
untidy.png
data <- data_frame(
ID = c(1, 2, 3),
Group1 = c("x", "y", "z"),
Group2 = c("a", "b", "c"))
data
data %>% tidyr::gather("Key", "Value", -ID)
data %>% reshape2::melt("ID", variable.name = "Key", value.name = "Value")
getwd()
getwd()
knitr::opts_chunk$set(echo = TRUE)
saveFiles <- function(x){
lapply(split(x,x$file),function(x){
print(paste0(seqnames(x)[1],".",x$file[1],".txt"))
write.table(paste0("@",x$Query," ",sapply(strsplit(x$Query,".",TRUE), "[[", 2)," length=100
"),paste0("readAllignments/",seqnames(x)[1],".",x$file[1],".txt"),quote=FALSE,row.names = FALSE,col.names = FALSE)
})
return("Passed")
}
load("../app/LangCelegansMMseqs2Granges.Rdata")
load("../app/LangCelegansMMseqs2Granges.Rdata")
splitDiamond <- split(diamondGRanges,seqnames(diamondGRanges))
lapply(splitDiamond,saveFiles)
saveFiles <- function(x){
lapply(split(x,x$file),function(x){
print(paste0(seqnames(x)[1],".",x$file[1],".txt"))
write.table(paste0("@",x$Query," ",sapply(strsplit(x$Query,".",TRUE), "[[", 2)," length=100
"),paste0("readAllignmentsMMSEQ2/",seqnames(x)[1],".",x$file[1],".txt"),quote=FALSE,row.names = FALSE,col.names = FALSE)
})
return("Passed")
}
load("../app/LangCelegansMMseqs2Granges.Rdata")
load("../app/LangCelegansMMseqs2Granges.Rdata")
splitDiamond <- split(diamondGRanges,seqnames(diamondGRanges))
load("../app/LangCelegansMMseqs2Granges.Rdata")
splitDiamond <- split(diamondGRanges,seqnames(diamondGRanges))
lapply(splitDiamond,saveFiles)
saveFiles <- function(x){
lapply(split(x,x$file),function(x){
print(paste0(seqnames(x)[1],".",x$file[1],".txt"))
write.table(paste0("@",x$Query," ",sapply(strsplit(x$Query,".",TRUE), "[[", 2)," length=100"),paste0("readAllignmentsMMSEQ2/",seqnames(x)[1],".",x$file[1],".txt"),quote=FALSE,row.names = FALSE,col.names = FALSE)
})
return("Passed")
}
load("../app/LangCelegansMMseqs2Granges.Rdata")
load("../app/LangCelegansMMseqs2Granges.Rdata")
splitDiamond <- split(diamondGRanges,seqnames(diamondGRanges))
splitDiamond <- split(diamondGRanges,seqnames(diamondGRanges))
lapply(splitDiamond,saveFiles)
saveFiles <- function(x){
lapply(split(x,x$file),function(x){
print(paste0(seqnames(x)[1],".",x$file[1],".txt"))
write.tablex(x$Query,paste0("readAllignmentsMMSEQ2/",seqnames(x)[1],".",x$file[1],".txt"),quote=FALSE,row.names = FALSE,col.names = FALSE)
#,"",sapply(strsplit(x$Query,".",TRUE), "[[", 2),"length=100"
})
return("Passed")
}
lapply(splitDiamond,saveFiles)
lapply(splitDiamond,saveFiles)
saveFiles <- function(x){
lapply(split(x,x$file),function(x){
print(paste0(seqnames(x)[1],".",x$file[1],".txt"))
write.table(x$Query,paste0("readAllignmentsMMSEQ2/",seqnames(x)[1],".",x$file[1],".txt"),quote=FALSE,row.names = FALSE,col.names = FALSE)
#,"",sapply(strsplit(x$Query,".",TRUE), "[[", 2),"length=100"
})
return("Passed")
}
lapply(splitDiamond,saveFiles)
shiny::runApp('GitHub/Sparkle/app')
